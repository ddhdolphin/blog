(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{367:function(t,e,v){"use strict";v.r(e);var s=v(44),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"vue-题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-题"}},[t._v("#")]),t._v(" Vue 题")]),t._v(" "),v("h2",{attrs:{id:"v-show-和-v-if-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v-show-和-v-if-的区别"}},[t._v("#")]),t._v(" v-show 和 v-if 的区别")]),t._v(" "),v("p",[t._v("v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。")]),t._v(" "),v("p",[t._v("v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。")]),t._v(" "),v("p",[t._v("相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。")]),t._v(" "),v("p",[t._v("一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。")]),t._v(" "),v("h2",{attrs:{id:"为何-v-for-中要用-key"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为何-v-for-中要用-key"}},[t._v("#")]),t._v(" 为何 v-for 中要用 key")]),t._v(" "),v("p",[t._v("key 的特殊 attribute 主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。")]),t._v(" "),v("p",[t._v("有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。")]),t._v(" "),v("h2",{attrs:{id:"描述-vue-组件的生命周期函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#描述-vue-组件的生命周期函数"}},[t._v("#")]),t._v(" 描述 Vue 组件的生命周期函数")]),t._v(" "),v("p",[v("img",{attrs:{src:"/lifecycle.png",alt:"test"}})]),t._v(" "),v("h2",{attrs:{id:"vue-组件如何通讯"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-组件如何通讯"}},[t._v("#")]),t._v(" Vue 组件如何通讯")]),t._v(" "),v("p",[t._v("props 主要用于父组件传递数据给子组件，是你可以在组件上注册一些自定义特性。当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性。这样在子组件就可以使用该该值。请注意：所有的 prop 都使得期父子 prop 之间形成了一个单向下行绑定，即父级 prop 的更新会向下流动到子组件，但是反过来就不行，子组件不能改变父组件的状态。")])])}),[],!1,null,null,null);e.default=r.exports}}]);